library(pipeR)
library(data.table)
library(dplyr)
library(pacman)
library(ggthemes)
library(lubridate)
library(tidyr)
pacman::p_load(tm,SnowballC,foreign,plyr,twitteR,slam,foreign,wordcloud,LiblineaR,e1071,caret,ranger,rpart)
detach("package:plyr", unload=TRUE) 
setwd("~/Desktop/Machine Learning/Final project")

## Load in data
companies = read.csv ("/Users.../Machine Learning/Crunchbase data/2016 analysis/companies.csv", header = TRUE, na.strings = c("", "-99", "-9", "NA"))

acquisitions = read.csv ("/Users...Machine Learning/Crunchbase data/2016 analysis/acquisitions.csv", header = TRUE, na.strings = c("", "-99", "-9", "NA"))

master = merge(companies, acquisitions, by=c("name","country"), all=TRUE) 


#create category varibales
text <- master[c(1, 3)]

text_cleaner<-function(corpus, rawtext){
  tempcorpus = lapply(corpus,toString)
  for(i in 1:length(tempcorpus)){
    tempcorpus[[i]]<-iconv(tempcorpus[[i]], "ASCII", "UTF-8", sub="")
  }
  if(rawtext == TRUE){
    tempcorpus = lapply(tempcorpus, function(t) t$getText())
  }
  tempcorpus = lapply(tempcorpus, tolower)
  tempcorpus<-Corpus(VectorSource(tempcorpus))
  tempcorpus<-tm_map(tempcorpus,
                     removePunctuation)
  return(tempcorpus)
}

oldcorpus = text$category_list
newcorpus = text_cleaner(oldcorpus, rawtext = FALSE)

dtm = DocumentTermMatrix(newcorpus)
inspect(dtm[1,1:20])
dtm = removeSparseTerms(dtm, 0.99) # Reduce sparsity
dtm_mat = as.matrix(dtm)
colnames(dtm_mat) = paste("industry", colnames(dtm_mat), sep = ".") #start any industry's title with "industry." 

#let's combine the datasets vertically 
sample = cbind(master,dtm_mat)

##removing unwanted observations and variables 
table(sample$status)
sample = sample[which(sample$status=='acquired' | sample$status=='closed' | sample$status=='ipo'), ] #keeping only these values
sample = sample[ -c(6, 8, 13:26)] #I'm removing these variables from the dataset
sample$category_list = as.character (sample$category_list)
sample$category_list[is.na(sample$category_list)] = "Other" 
sum(is.na(sample$category_list))
dim(sample)
summary(sample$status)

##create country dummy and add that to the dataset
sample$country = as.character(sample$country)
sum(is.na(sample$country)) #total missings
sample$country[is.na(sample$country)] = "Other" #replacing missing values as "other

country. = factor(sample$country)
country.dummies = model.matrix(~country.)
country.dummies = data.frame(country.dummies)
country.dummies = country.dummies[-1] #remove the first variable

#create region dummies and add to the dataframe = the ones that appear the most
sample$region = as.character(sample$region)
sum(is.na(sample$region))
sample$region[is.na(sample$region)] = "Other" #replacing missing values as "other
sample$region = gsub("[[:punct:]]", "",sample$region) #remove special characters
sample$region = gsub(" ", "",sample$region) #remove whitespaces
region = sample$region
newregion = text_cleaner(region, rawtext = FALSE)
dtm.region = DocumentTermMatrix(newregion)
inspect(dtm.region[1,1:20])
dtm.region = removeSparseTerms(dtm.region, 0.99) # Reduce sparsity
dtm.region.mat = as.matrix(dtm.region)
region.dummies = data.frame(dtm.region.mat)
region.dummies = region.dummies[-1] #remove the first variable

colnames(region.dummies) = paste("region", colnames(region.dummies), sep = ".") #start a region's name  with "region." 

#bind all the variables
sample = cbind(sample,country.dummies, region.dummies) #adding country dummies with the existing dataset

##cleaning up numarical varibales 
sample$funding_rounds = as.numeric(sample$funding_rounds)
#sample$id = seq.int(nrow(sample)) #create ID column
sample$funding_total_usd[sample$funding_total_usd == "-"] = NA #replacing missing values as NA
sample$funding_total_usd = as.character(sample$funding_total_usd) #for some reason changing it straight to numeric changes the values
sample$funding_total_usd = as.numeric(sample$funding_total_usd) #now we can change them to numeric 

##cleaning up total funding with multiple imputation 
library(mice)
imp<-mice(data = sample[,c("funding_total_usd", "funding_rounds", "industry.software", "country.USA")], seed = 22)
print(imp)
head(imp$imp$funding_total_usd)
dat.imp<-complete(imp)
head(dat.imp, n=10)
dat.imp= dat.imp [1:3]
sample = cbind(sample,dat.imp) #combining with the sample
#sample = sample [-3] #now remove the previous variable bc we just added one

##create time and other time related variables
sample$founded_at <- strptime(sample$founded_at, "%m/%d/%y") %>>% as.POSIXct()
sample$first_funding_at <- strptime(sample$first_funding_at, "%m/%d/%y") %>>% as.POSIXct()
sample$last_funding_at <- strptime(sample$last_funding_at, "%m/%d/%y") %>>% as.POSIXct()

#there are some missing values for date; so we have to be creative with the variables
#sample$founding_funding = ifelse(sample$founded_at == sample$first_funding_at, 1,0) #if founding and fuding same date
#sample$founding_funding[is.na(sample$founding_funding)] = "0"
#sample$founding_funding = as.numeric(sample$founding_funding)
#summary(sample$founding_funding)

###########

#difference between the last funding time - first funding time
sample$last_first_funding <- difftime(sample$last_funding_at, sample$first_funding_at,
                                     units = "days") %>>% as.numeric
sample$last_first_funding [sample$last_first_funding <0] = "0"
sample$last_first_funding[is.na(sample$last_first_funding)] = "0"
sample$last_first_funding = as.numeric(sample$last_first_funding)

#And create year variables
sample$year = format(as.Date(sample$founded_at, format="%d/%m/%Y"),"%Y")
#sample$dob = ymd(sample$founded_at)
#date = separate(sample, dob, c("year","month", "day"))
#sample = sample[,-which(names(sample) == "month")] #removing month 
#sample = sample[,-which(names(sample) == "day")] #removing day 
#sample$year = as.character(sample$year)
names(sample)[names(sample) == "year"] = "year_founded"
sample$year_founded[is.na(sample$year_founded)] = "other_year"
sum(is.na(sample$year_founded))
table(sample$year_founded)
#keep only from year 2000 to 2017
sample = sample[ which(sample$year_founded>="2000" & sample$year_founded<"2016"), ]
##creating year dummies
founded. = factor(sample$year_founded)
year.founded.dummies = data.frame(model.matrix(~founded.))
sample = cbind(sample, year.founded.dummies)
sample = sample[,-which(names(sample) == "year_founded")] #removing "year founded" 


#what if the names predict success. create variables with the most used words in startups names 
old = sample$name
new = text_cleaner(old, rawtext = FALSE)
dtm.m = DocumentTermMatrix(new)
inspect(dtm.m[1,1:20])
dtm.m = removeSparseTerms(dtm.m, 0.99) # Reduce sparsity
dtm_mat.m = as.matrix(dtm.m)

colnames(dtm_mat.m) = paste("name", colnames(dtm_mat.m), sep = ".") #start any startup's name  with "name." 
sample=cbind(sample, dtm_mat.m)

#create founding round dummies 
rounds. = factor(sample$funding_rounds)
funding.dummies = model.matrix(~rounds.)
funding.dummies = data.frame(funding.dummies)
funding.dummies = funding.dummies[-1] #remove the first variable
sample = cbind(sample, funding.dummies)

##creating outcome variable 
sample$success = ifelse (sample$status != "closed", 1, 0)
table(sample$success)
sample$success = as.numeric(sample$success)
sample = sample[,-which(names(sample) == "status")] #removing "status" 

##checking if there's any NAs
sum(is.na(sample))
sample=na.omit(sample)

#########save data for description stats
des=data.frame(sample)
write.csv(des, "des.csv")

#########save data for dataset_xy: includes only the varibales with all Xs and Y
dataset_xy = data.frame(sample[-c(1:3,5:9,131:133,135)]) #I'm removing these variables from the dataset
write.csv(dataset_xy,"dataset_xy.csv")


########save dataset for only Xs
features = data.frame(dataset_xy[-c(159)]) #I'm removing these variables from the dataset
write.csv(features,"features.csv")
########################

##view composed summary of the data
#str(sample)
#######EXTRA CODE FOR REMOVING VALUES
#sample = sample[!(sample$status=="operating"),] #observations
#sample = sample[!(sample$status=="NA"),] #observations
#sample$status = as.character(sample$status)
#sample$status[sample$status == ""] = "B"

########################
